/*
 * Copyright (C) 2011 McGill University
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
* BrainBrowser v1.3.8
* https://brainbrowser.cbrain.mcgill.ca/
*
* Author: Tarek Sherif  <tsherif@gmail.com> (http://tareksherif.ca/)
* Author: Nicolas Kassis
*/
BrainBrowser.VolumeViewer.modules.uiControls = function(a) {
	"use strict";
	var b = BrainBrowser.VolumeViewer;
	a.globalUIControls = function(b) {
		var c, d, e = $('<div id="global-controls" class="volume-viewer-controls"></div>');
		a.volumes.length > 1 && (c = $('<input type="checkbox" class="button" id="sync"><label for="sync">Sync Volumes</label>'), c.change(function() {
			a.synced = c.is(":checked")
		}), e.append(c)),
		d = $('<span id="capture" class="button">Capture Slices</span>'),
		d.click(function() {
			var b = a.displays[0][0].canvas.width,
			c = a.displays[0][0].canvas.height,
			d = a.active_canvas,
			e = document.createElement("canvas"),
			f = e.getContext("2d"),
			g = new Image;
			e.width = b * a.displays.length,
			e.height = 3 * c,
			f.fillStyle = "#000000",
			f.fillRect(0, 0, e.width, e.height),
			a.active_canvas = null,
			a.draw(),
			a.displays.forEach(function(a, d) {
				a.forEach(function(a, e) {
					f.drawImage(a.canvas, d * b, e * c)
				})
			}),
			a.active_canvas = d,
			a.draw(),
			g.onload = function() {
				$("<div></div>").append(g).dialog({
					title: "Slices",
					height: g.height,
					width: g.width
				})
			},
			g.src = e.toDataURL()
		}),
		e.append(d),
		$(b).append(e)
	},
	a.volumeUIControls = function(b, c, d) {
		b = $(b),
		a.coordinateUI(b, c, d),
		"multivolume" === c.type ? a.blendUI(b, c, d) : (a.colorScaleUI(b, c, d), a.thresholdUI(b, c, d), c.data.time && a.timeUI(b, c, d), a.sliceSeriesUI(b, c, d))
	},
	a.coordinateUI = function(b, c) {
		var d, e, f;
		if (c.getWorldCoords) {
			d = $('<div class="coords"></div>'),
			e = $('<div class="control-heading">World Coordinates: </div><div class="world-coords">X:<input id="world-x" class="control-inputs"></input>Y:<input id="world-y" class="control-inputs"></input>Z:<input id="world-z" class="control-inputs"></input></div>');
			var g = {
				x: e.find("#world-x"),
				y: e.find("#world-y"),
				z: e.find("#world-z")
			};
			e.change(function() {
				var b = parseFloat(g.x.val()),
				d = parseFloat(g.y.val()),
				e = parseFloat(g.z.val());
				BrainBrowser.utils.isNumeric(b) || (b = 0),
				BrainBrowser.utils.isNumeric(d) || (d = 0),
				BrainBrowser.utils.isNumeric(e) || (e = 0),
				c.setWorldCoords(b, d, e),
				a.redrawVolumes()
			}),
			f = $('<div class="control-heading">Voxel Coordinates: </div><div class="voxel-coords">X:<input id="voxel-x" class="control-inputs"></input>Y:<input id="voxel-y" class="control-inputs"></input>Z:<input id="voxel-z" class="control-inputs"></input></div>');
			var h = {
				x: f.find("#voxel-x"),
				y: f.find("#voxel-y"),
				z: f.find("#voxel-z")
			};
			f.change(function() {
				var b = parseInt(h.x.val(), 10),
				d = parseInt(h.y.val(), 10),
				e = parseInt(h.z.val(), 10);
				BrainBrowser.utils.isNumeric(b) || (b = 0),
				BrainBrowser.utils.isNumeric(d) || (d = 0),
				BrainBrowser.utils.isNumeric(e) || (e = 0),
				c.setVoxelCoords(b, d, e),
				a.redrawVolumes()
			}),
			a.addEventListener("sliceupdate",
			function() {
				var a = c.getWorldCoords(),
				b = c.getVoxelCoords();
				g.x.val(a.x),
				g.y.val(a.y),
				g.z.val(a.z),
				h.x.val(b.x),
				h.y.val(b.y),
				h.z.val(b.z)
			})
		}
		d.append(e),
		d.append(f),
		b.append(d)
	},
	a.blendUI = function(b, c) {
		var d = $('<div id="blend-slider" class="slider volume-viewer-blend"></div>'),
		e = $('<div class="control-heading">Blend (-50 to 50): </div>'),
		f = $('<input class="control-inputs" value="0" id ="blend-val"/>');
		e.append(f),
		e.append(d),
		b.append(e),
		d.slider({
			min: -50,
			max: 50,
			step: 1,
			slide: function(b, d) {
				var e = parseInt(d.value, 10);
				c.updateBlendRatio(e),
				a.redrawVolumes(),
				f.val(e)
			},
			stop: function() {
				$(this).find("a").blur()
			}
		}),
		f.change(function() {
			var b = parseFloat(this.value);
			BrainBrowser.utils.isNumeric(b) || (b = 0),
			b = Math.max( - 50, Math.min(b, 50)),
			this.value = b,
			d.slider("value", b),
			c.updateBlendRatio(b),
			a.redrawVolumes()
		})
	},
	a.colorScaleUI = function(c, d) {
		var e = $("<select></select>"),
		f = "";
		b.colorScales.forEach(function(b, c) {
			f += '<option value="' + c + '"' + (a.defaultScale === b ? " SELECTED": "") + ">" + b.name + "</option>"
		}),
		e.html(f),
		e.change(function(c) {
			d.colorScale = b.colorScales[ + $(c.target).val()],
			a.redrawVolumes()
		}),
		c.append($('<div class="control-heading">Color Scale: </div>').append(e))
	},
	a.thresholdUI = function(b, c) {
		var d = $('<div class="slider volume-viewer-threshold"></div>'),
		e = $('<div class="control-heading" class="slider-div">Threshold: </div>'),
		f = $('<input class="control-inputs thresh-input-left" value="0"/>'),
		g = $('<input class="control-inputs thresh-input-right" value="255"/>'),
		h = $('<div class="thresh-inputs"></div>');
		h.append(f).append(g),
		e.append(h),
		b.append(e),
		e.append(d),
		d.slider({
			range: !0,
			min: 0,
			max: 255,
			values: [0, 255],
			step: 1,
			slide: function(b, d) {
				var e = d.values;
				c.min = e[0],
				c.max = e[1],
				a.redrawVolumes(),
				f.val(e[0]),
				g.val(e[1])
			},
			stop: function() {
				$(this).find("a").blur()
			}
		}),
		f.change(function() {
			var b = parseFloat(this.value);
			BrainBrowser.utils.isNumeric(b) || (b = 0),
			b = Math.max(0, Math.min(b, 255)),
			this.value = b,
			d.slider("values", 0, b),
			c.min = b,
			a.redrawVolumes()
		}),
		g.change(function() {
			var b = parseFloat(this.value);
			BrainBrowser.utils.isNumeric(b) || (b = 255),
			b = Math.max(0, Math.min(b, 255)),
			this.value = b,
			d.slider("values", 1, b),
			c.max = b,
			a.redrawVolumes()
		})
	},
	a.timeUI = function(b, c, d) {
		var e, f = $('<div class="control-heading" class="slider-div">Time: </div>'),
		g = $('<div class="slider volume-viewer-threshold"></div>'),
		h = $('<input class="control-inputs" value="0" id ="time-val"/>'),
		i = $('<input type="checkbox" class="button" id="play-' + d + '"><label for="play-' + d + '">Play</label>'),
		j = 0,
		k = c.data.time.space_length - 1;
		g.slider({
			min: j,
			max: k,
			value: 0,
			step: 1,
			slide: function(b, d) {
				var e = +d.value;
				h.val(e),
				c.current_time = e,
				a.redrawVolumes()
			},
			stop: function() {
				$(this).find("a").blur()
			}
		}),
		h.change(function() {
			var b = parseInt(this.value, 10);
			BrainBrowser.utils.isNumeric(b) || (b = 0),
			b = Math.max(j, Math.min(b, k)),
			this.value = b,
			h.val(b),
			g.slider("value", b),
			c.current_time = b,
			a.redrawVolumes()
		}),
		i.change(function() {
			i.is(":checked") ? (clearInterval(e), e = setInterval(function() {
				var b = c.current_time + 1;
				b = b > k ? 0 : b,
				c.current_time = b,
				h.val(b),
				g.slider("value", b),
				a.redrawVolumes()
			},
			200)) : clearInterval(e)
		}),
		f.append(h),
		f.append(g),
		b.append(f),
		b.append(i)
	},
	a.sliceSeriesUI = function(a, b) {
		var c = $('<div class="control-heading">All slices: </div>'),
		d = $("<div></div>"),
		e = $('<span class="slice-series button" data-axis="xspace" style="font-size: 11px">Sagittal</span>'),
		f = $('<span class="slice-series button" data-axis="yspace" style="font-size: 11px">Coronal</span>'),
		g = $('<span class="slice-series button" data-axis="zspace" style="font-size: 11px">Transverse</span>'),
		h = {
			xspace: "Sagittal",
			yspace: "Coronal",
			zspace: "Transverse"
		};
		d.append(e),
		d.append(f),
		d.append(g),
		d.find(".slice-series").click(function() {
			var a, c, d, e = $(this).data("axis"),
			f = b.data[e],
			g = f.space_length,
			i = b.current_time,
			j = 10,
			k = .5,
			l = document.createElement("canvas"),
			m = l.getContext("2d"),
			n = b.slice(e, 0, i).getImage(k),
			o = new Image;
			for (l.width = j * n.width, l.height = (g / j + 1) * n.height, m.fillStyle = "#000000", m.fillRect(0, 0, l.width, l.height), a = 0; g > a; a++) n = b.slice(e, a, i).getImage(k),
			c = a % j * n.width,
			d = Math.floor(a / j) * n.height,
			m.putImageData(n, c, d);
			o.onload = function() {
				$("<div></div>").append(o).dialog({
					title: h[e] + " Slices",
					height: 600,
					width: o.width
				})
			},
			o.src = l.toDataURL()
		}),
		c.append(d),
		a.append(c)
	}
};